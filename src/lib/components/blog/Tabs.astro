---
import CodeBlockTitle from "./CodeBlockTitle.astro";

const { tabs } = {
  ...Astro.props,
} as {
  tabs: { id: string; title?: string; lang?: string }[];
};
---

<div class="feature-tabs">
  <div class="feature-tablist" role="tablist" aria-label="Code tabs">
    {
      tabs.map(({ id, title, lang }, i) => (
        <button
          role="tab"
          id={`tab-${id}`}
          aria-controls={`panel-${id}`}
          aria-selected={i === 0 ? "true" : "false"}
          tabindex={i === 0 ? "0" : "-1"}>
          <CodeBlockTitle {title} {lang} />
        </button>
      ))
    }
  </div>
  <slot />
</div>

<style>
  .feature-tabs {
    border-radius: 5px;
    background-color: var(--background-two) !important;

    display: grid;
    grid-template-rows: min-content 1fr;

    font-size: 13px;
  }

  .feature-tablist {
    display: flex;
    gap: 20px;
  }

  .feature-tablist > button {
    position: relative;
  }

  button::before {
    content: "";

    position: absolute;
    left: -4px;
    right: -6px;
    bottom: -1px;

    border-top-right-radius: 1.5px;
    border-top-left-radius: 1.5px;

    height: 2.5px;

    background-color: transparent;

    transition:
      background-color var(--transition-blink),
      height var(--transition-short);
  }

  button:hover::before {
    height: 1.5px;
    background-color: var(--text-three);
  }

  button[aria-selected="true"]::before {
    height: 2.5px;
    background-color: var(--blue);
  }

  :global(.feature-tabpanel) {
    background-color: var(--background-two) !important;
  }
</style>

<script>
  type DivEl = HTMLDivElement;
  type BtnEl = HTMLButtonElement;

  const tablist = document.querySelector('[role="tablist"]') as DivEl;
  const tabs = Array.from(tablist.querySelectorAll('[role="tab"]')) as BtnEl[];

  let panels = [] as DivEl[];

  tabs.forEach((tab) => {
    const panel = document.getElementById(tab.getAttribute("aria-controls")!);

    if (!panel) {
      throw new Error(
        `No panel found for tab ${tab.id} (looking for ${tab.getAttribute(
          "aria-controls",
        )})`,
      );
    }

    panels.push(panel as DivEl);
  });

  const firstPanelHeight = panels[0].getBoundingClientRect().height;

  panels.slice(1).forEach((panel) => {
    const pre = panel.querySelector("code")!;

    pre.style.maxHeight = `${firstPanelHeight}px`;
    pre.style.overflowY = "auto";
  });

  const selectTab = (newTab: BtnEl, { focus = true } = {}) => {
    tabs.forEach((tab, i) => {
      const selected = tab === newTab;

      tab.setAttribute("aria-selected", String(selected));
      tab.tabIndex = selected ? 0 : -1;

      panels[i].hidden = !selected;
    });

    if (focus) {
      newTab.focus();
    }
  };

  const getEnabledTabs = () =>
    tabs.filter((t) => t.getAttribute("aria-disabled") !== "true");

  const moveFocus = (current: BtnEl, delta: number) => {
    const enabled = getEnabledTabs();
    const idx = enabled.indexOf(current);
    const next = enabled[(idx + delta + enabled.length) % enabled.length];
    next.focus();
  };

  tabs.forEach((tab) => {
    tab.addEventListener("click", (e) => {
      e.preventDefault();
      selectTab(tab);
    });
  });

  tablist.addEventListener("keydown", (e) => {
    if (!document.activeElement) return;

    const current = document.activeElement.closest('[role="tab"]') as BtnEl;
    if (!current) return;

    if (e.key === "ArrowRight" || e.key === "Right") {
      e.preventDefault();
      moveFocus(current, +1);
    } else if (e.key === "ArrowLeft" || e.key === "Left") {
      e.preventDefault();
      moveFocus(current, -1);
    } else if (e.key === "Home") {
      e.preventDefault();
      getEnabledTabs()[0].focus();
    } else if (e.key === "End") {
      e.preventDefault();
      const enabled = getEnabledTabs();
      enabled[enabled.length - 1].focus();
    } else if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      selectTab(current);
    }
  });

  const initiallySelected =
    tabs.find((t) => t.getAttribute("aria-selected") === "true") || tabs[0];

  selectTab(initiallySelected, { focus: false });
</script>
